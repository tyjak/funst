#!/usr/bin/env bash
# ·▄▄▄▄• ▄▌ ▐ ▄ .▄▄ · ▄▄▄▄▄
# ▐▄▄·█▪██▌•█▌▐█▐█ ▀. •██  
# ██▪ █▌▐█▌▐█▐▐▌▄▀▀▀█▄ ▐█.▪
# ██▌.▐█▄█▌██▐█▌▐█▄▪▐█ ▐█▌·
# ▀▀▀  ▀▀▀ ▀▀ █▪ ▀▀▀▀  ▀▀▀ 
# Created by Siddharth Dushantha
#
# Dependencies: sxiv, imagemagick, bash, ffmpeg, mpc, jq, mpd, dunst


VERSION=1.3.2
COVER=/tmp/funst.png
ORIG_COVER=/tmp/funst_original.png
SCREEN_COVER=/tmp/funst_screen.png
SCREEN_DESKTOP=/tmp/funst_desktop.png
MUSIC_DIR=~/Music/
SIZE=450x450
ICONSIZE=70x70
POSITION="+0+0"
ONLINE_ALBUM_ART=false
MODE="cover"

show_help() {
printf "%s" "\
usage: funst [-h] [--size \"px\"] [--position \"+x+y\"][--music_dir \"path/to/dir\"] [--notify-send] [--silent] [--version]


·▄▄▄▄• ▄▌ ▐ ▄ .▄▄ · ▄▄▄▄▄
▐▄▄·█▪██▌•█▌▐█▐█ ▀. •██  
██▪ █▌▐█▌▐█▐▐▌▄▀▀▀█▄ ▐█.▪
██▌.▐█▄█▌██▐█▌▐█▄▪▐█ ▐█▌·
▀▀▀  ▀▀▀ ▀▀ █▪ ▀▀▀▀  ▀▀▀ 
Download and display album art or display embedded album art

optional arguments:
   -h, --help            show this help message and exit
   --size                what size to display the album art in
   --position            the position where the album art should be displayed
   --music_dir           the music directory which MPD plays from
   --notify-send         use notify-send
   --screen-saver        screen saver mode
   --silent              dont show the output
   --force-online        force getting cover from the internet
   --version             show the version of funst you are using
"
}


# Parse the arguments
options=$(getopt -o h --long position:,size:,music_dir:,notify-send,screen-saver,version,force-online,silent,help -- "$@")
eval set -- "$options"

while true; do
    case "$1" in
        --size)
            shift;
            SIZE=$1
            ;;
        --position)
            shift;
            POSITION=$1
            ;;
        --music_dir)
            shift;
            MUSIC_DIR=$1
            ;;
        -h|--help)
            show_help
            exit
            ;;
        --notify-send)
            NOTIFY=true
            ;;
        --screen-saver)
            SCREEN_SAVER=true
            ;;
        --version)
            echo $VERSION
            exit
            ;;
        --force-online)
            ONLINE_ALBUM_ART=true
            ;;
        --silent)
            SILENT=true
            ;;
        --)
            shift
            break
            ;;
    esac
    shift
done

# This is a base64 endcoded image which will be used if
# the file does not have an emmbeded album art.
# The image is an image of a music note
read -r -d '' MUSIC_NOTE << EOF
iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJESURBVGhD7Zg/axRRFMVXAtpYphEVREKClnHfJI0MmReSfAC3tRejhaBgo70fwN7aD2BvEU0gfztbu5AqMxNjoVnvG87KZXy7z5m5dxLI/OCw8Pade+7M3n3Dbq+jo6OjY8RwMJhKk+hhlph3eRJ9w/LF5jCOr1PTj6jpD7mNjkjDkbDl4vFjpX87teZJlkSfSD9501zYfv5QJ1fyZHGexuJtZs12ZqMzX8NlwX4+nK3NXMutWaOm39Nd/u5rMCSUao80fjBNwY+p8Y+krNxQVaGsLsfWzFLYS2r4M30Rf5WbaCJE6OILlhIidPEFSwkRuviCpYQIXXzB1WX26bR6ky4v3OPriNCFB1YRHa079Pr6eKk/h1IFfA+WdOGBk+QeXtT0Ft3pV6e2fxf2f+AeLOnCA8tC0xv09H1xGi/cgWUi3I8lXXigEzX8u3gmWPP8JI5uYdt/w2thSRceSM0/zVfnb+CtWvB6WNJFOlC6XhDpQOl6QaQDpesFkQ6UrhdEOlC6XpA6gcPB/avumKXnxCadXHkha766tTr1GlE18CRZvEmN7nHfOMGiS5XA4mdmYg64Z5Jg06VKYHlEQoKtOVIz6zx8f0iwNUNyZt2F+3zjBFt9pGe22gWYFLb6lEckJNjGUmWEssR8ga0+0jNL9Z75fD7Rp7UOW32kZxb/1u37vFyUu+sODtjqozGzxaFADfprFM3vuD3Y3gytmf17LJPHXbgTNb5BWhe58yNan1lpWp9ZDVqdWS1am9mOjo7LRq/3B1ESKyYUVquzAAAAAElFTkSuQmCC
EOF


is_connected() {
    # Check if internet is connected. We are using api.deezer.com to test
    # if the internet is connected because if api.deezer.com is down or
    # the internet is not connected this script will work as expected
    if ping -q -c 1 -W 1 api.deezer.com >/dev/null; then
        connected=true
    else
        [ ! "$SILENT" ] && echo "funst: unable to check online for the album art"
        connected=false
    fi
}


get_cover_online() {
    # Check if connected to internet
    is_connected

    if [ "$connected" == false ];then
        ARTLESS=true
        return
    fi

    # If the current playing song ends with .mp3 or something similar, remove
    # it before searching for the album art because including the file extension
    # reduces the chance of good results in the search query
    QUERY=$(mpc current | sed 's/\.[^.]*$//' | iconv -t ascii//TRANSLIT -f utf8)

    # Try to get the album cover online from api.deezer.com
    API_URL="https://api.deezer.com/search/autocomplete?q=$QUERY" && API_URL=${API_URL//' '/'%20'}

    # Extract the albumcover from the json returned
    IMG_URL=$(curl -s "$API_URL" | jq -r '.tracks.data[0].album.cover_big')

    if [ "$IMG_URL" = '' ] || [ "$IMG_URL" = 'null' ];then
        [ ! "$SILENT" ] && echo "error: cover not found online"
        ARTLESS=true
    else
        [ ! "$SILENT" ] && echo "funst: cover found online"
        # FIXME: we suppose the img provide by deezer is always jpg but needs to be catched
        curl -o "${ORIG_COVER}.jpg" -s "$IMG_URL"
        convert "${ORIG_COVER}.jpg" $ORIG_COVER &> /dev/null
        ARTLESS=false
    fi

}

find_album_art(){
    # Check if the user wants to get the album art from the internet,
    # regardless if the curent song has an embedded album art or not
    if [ "$ONLINE_ALBUM_ART" == true ];then
        [ ! "$SILENT" ] && echo "funst: getting cover from internet"
        get_cover_online
        return
    fi

    # Extract the album art from the mp3 file and dont show the messsy
    # output of ffmpeg
    ffmpeg -i "$MUSIC_DIR$(mpc current -f %file%)" "$ORIG_COVER" -y &> /dev/null

    # Get the status of the previous command
    STATUS=$?

    # Check if the file has a embbeded album art
    if [ "$STATUS" -eq 0 ];then
        [ ! "$SILENT" ] && echo "funst: extracted album art"
        ARTLESS=false
    else
        DIR="$MUSIC_DIR$(dirname "$(mpc current -f %file%)")"
        [ ! "$SILENT" ] && echo "funst: inspecting $DIR"

        # Check if there is an album cover/art in the folder.
        # Look at issue #9 for more details
        for CANDIDATE in "$DIR/cover."{png,jpg}; do
            if [ -f "$CANDIDATE" ]; then
                STATUS=0
                ARTLESS=false
                convert "$CANDIDATE" $ORIG_COVER &> /dev/null
                [ ! "$SILENT" ] && echo "funst: found cover.png"
            fi
        done
    fi

    if [ "$STATUS" -ne 0 ];then
        [ ! "$SILENT" ] && echo "error: file does not have an album art"
        get_cover_online
    fi
}


update_cover() {
    find_album_art

    if [ "$SCREEN_SAVER" == true ]; then
        update_screen_cover
    elif [ "$ARTLESS" == false ]; then
        convert "$ORIG_COVER" -resize "$SIZE" "$COVER" &> /dev/null
        [ ! "$SILENT" ] && echo "funst: resized album art to $SIZE"
    fi

}

update_screen_cover() {
    # produce screen saver image
    convert "$ORIG_COVER" \( +clone -background black -shadow 50x10+15+15 \) +swap -background none -layers merge +repage -resize "$SIZE" ${SCREEN_COVER}.shadow
    convert $SCREEN_DESKTOP \( ${SCREEN_COVER}.shadow -background none -gravity center \) -gravity center -composite $SCREEN_COVER
}


generate_screensaver_image() {
    maim -u > $SCREEN_DESKTOP
    convert $SCREEN_DESKTOP -filter Gaussian -blur 0x2 $SCREEN_DESKTOP
}


pre_exit() {
    # In screen saver dunst is paused, on exit resume
    if [ "$SCREEN_SAVER" == true ];then
        dunstctl set-paused false
        kill -9 "$(cat /tmp/funst_screensaver.pid)" &>/dev/null
    else
        # Get the proccess ID of funst and kill it.
        # We are dumping the output of kill to /dev/null
        # because if the user quits sxiv before they
        # exit funst, an error will be shown
        # from kill and we dont want that
        kill -9 "$(cat /tmp/funst.pid)" &>/dev/null
    fi

}

main() {

    dependencies=(sxiv convert bash ffmpeg mpc jq mpd dunst)
    for dependency in "${dependencies[@]}"; do
        type -p "$dependency" &>/dev/null || {
            echo "error: Could not find '${dependency}', is it installed?" >&2
            exit 1
        }
    done


    [ "$FUNST_MUSIC_DIR" != "" ] && MUSIC_DIR="$FUNST_MUSIC_DIR"
    [ "$FUNST_SIZE" != "" ] && SIZE="$FUNST_SIZE"
    [ "$FUNST_ICONSIZE" != "" ] && ICONSIZE="$FUNST_ICONSIZE"
    [ "$FUNST_POSITION" != "" ] && POSITION="$FUNST_POSITION"
    [ "$FUNST_MODE" != "" ] && MODE="$FUNST_MODE"

    # Flag to run some commands only once in the loop
    FIRST_RUN=true

    # Set send-notify via env var FUNST_MODE
    if [ "$MODE" == "notify" ];then
        NOTIFY=true
    fi

    if [ "$SCREEN_SAVER" == true ];then
        generate_screensaver_image
    fi

    while true; do

        if [ "$NOTIFY" == true ];then
            SIZE=$ICONSIZE
        fi

        update_cover

        if [ "$ARTLESS" == true ];then
            # Decode the base64 encoded image and save it
            # to /tmp/funst.png
            echo "$MUSIC_NOTE" | base64 --decode > "$COVER"
            if [ "$SCREEN_SAVER" == true ];then
                ORIG_COVER=$COVER
                update_screen_cover
            fi
        fi

        if [ ! "$SILENT" ];then
            echo "funst: swapped album art to $(mpc current)"
            printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
        fi

        if [ "$NOTIFY" == true ];then

            # Display art album with artist name, song title and duration
            notify-send \
                "$(mpc current --format "[%artist%]|Now Playing ♫")" \
                "$(mpc current --format "<small><i>[%title%]</i>\n[%time%]</small>")" \
                -i "$COVER" \
                -a funst

        elif [ "$FIRST_RUN" == true ]; then
            FIRST_RUN=false

            #screen saver mode
            if [ "$SCREEN_SAVER" == true ];then
                # Display album cover over the desktop blur image
                dunstctl set-paused true
                sxiv -f -b $SCREEN_COVER -N "funst" &
                echo $! >/tmp/funst_screensaver.pid
            else
                # Display the album art using sxiv
                sxiv -g "$SIZE$POSITION" -b "$COVER" -N "funst" &
                # Save the process ID so that we can kill
                # sxiv when the user exits the script
                echo $! >/tmp/funst.pid
            fi
        fi

        # Waiting for an event from mpd; play/pause/next/previous
        # this is lets funst use less CPU :)
        while true; do
            mpc idle player &>/dev/null && (mpc status | grep "\[playing\]" &>/dev/null) && break
        done
        [ ! "$SILENT" ] && echo "funst: received event from mpd"
    done
}

# Disable CTRL-Z because if we allowed this key press,
# then the script would exit but, sxiv would still be
# running
trap "" SIGTSTP

trap pre_exit EXIT
main
